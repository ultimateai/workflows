name: Deploy branch to staging

on:
  workflow_call:
    inputs:
        image_repo:
          required: true
          type: string
          description: "Your container registry repository - like europe-docker.pkg.dev/$project_id/$repo_id"
        app_squad:
          required: true
          type: string
          description: "Your app Squad - where your app is located inside argoCD (backend, ai, qa...)"
        github_email:
          required: true
          type: string
          description: "Automatic CI/CD commits will be done by this email"
        github_user:
          required: true
          type: string
          description: "Automatic CI/CD commits will be done by this user"
        k8s_manifests_repo:
          required: true
          type: string
          description: "Owner and repo name containing your k8s manifests - like ultimateai/k8s-manifests"
        branch_name:
          required: true
          type: string
          description: "Which branch you want to build and deploy to staging"
        test_command:
          required: false
          type: string
          description: "Command for running your tests, defaults to - npm run test"
          default: "npm run test"
        build_command:
          required: false
          type: string
          description: "Command for building, defaults to - npm run build"
          default: "npm run build"
        lint_command:
          required: false
          type: string
          description: "Command for running your linting, defaults to - npm run lint"
          default: "npm run lint"
        npm_install_command:
          required: false
          type: string
          description: "Command for npm i, defaults to - npm i"
          default: "npm i"
        app_names:
          required: false
          type: string
          description: "In case you want to deploy to multiple places or your app_name does not coincide with your repo name. format should be like app1,app2,app3"
        node_version:
          required: false
          type: string
          default: "16.x"
          description: "Node version used in the pipeline, defaults to 16.x"
        npm_version:
          required: false
          type: string
          description: "Npm version used in the pipeline, defaults to LTS version"
        region:
          required: false
          type: string
          description: "Region name to deploy - europe or us-central1, defaults to europe"
          default: "europe"
        runner:
          required: false
          default: "preemptible-runners"
          description: "Runner to use for the workflow"
          type: string


env:
  IMAGE_REPO: ${{ inputs.image_repo }}
  APP_SQUAD: ${{ inputs.app_squad }}
  GITHUB_EMAIL: ${{ inputs.github_email }}
  GITHUB_USER: ${{ inputs.github_user }}
  K8S_MANIFESTS_REPO: ${{ inputs.k8s_manifests_repo }}
  BRANCH_NAME: ${{ inputs.branch_name }}
  TEST_COMMAND: ${{ inputs.test_command }}
  BUILD_COMMAND: ${{ inputs.build_command }}
  LINT_COMMAND: ${{ inputs.lint_command }}
  APP_NAMES: ${{ inputs.app_names }}
  NPM_INSTALL_COMMAND: ${{ inputs.npm_install_command }}
  NODE_VERSION: ${{ inputs.node_version }}
  NPM_VERSION: ${{ inputs.npm_version }}
  GCR_ENABLED: ${{ vars.GCR_ENABLED || 'true' }}
  GAR_ENABLED: ${{ vars.GAR_ENABLED || 'true' }}
  GCR_DEFAULT_REPO: ${{ vars.GCR_DEFAULT_REPO }}
  GAR_DEFAULT_REPO: ${{ vars.GAR_DEFAULT_REPO }}
  REGION: ${{ inputs.region }}
  AVAILABLE_REGIONS_FOR_DEPLOYMENT: ${{ vars.AVAILABLE_REGIONS_FOR_DEPLOYMENT }}

jobs:
  deploy:
    name: Update k8s manifest repo for staging deployment
    runs-on: ${{ inputs.runner }}
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - name: Validation
        if: ${{ env.GCR_ENABLED != 'true' && env.GAR_ENABLED != 'true' }}
        run: |
          echo "At least one of GCR_ENABLED or GAR_ENABLED must be set to true.'
          exit 1
      
      - name: Check if region is valid
        run: |-
          if [[ " ${AVAILABLE_REGIONS_FOR_DEPLOYMENT[*]} " =~ ${{ env.REGION }} ]]; then
            echo "This region - ${{ env.REGION }} - is allowed"
          else
            echo "Region - ${{ env.REGION }} - is not yet supported. Supported regions are: ${AVAILABLE_REGIONS_FOR_DEPLOYMENT[*]}"
            echo "::error::Region - ${{ env.REGION }} - is not yet supported. Supported regions are: ${AVAILABLE_REGIONS_FOR_DEPLOYMENT[*]}"
            exit 1
          fi

      - name: Checkout to selected branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_NAME }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: npm install
        if: ${{ env.NPM_VERSION }}
        run: npm i -g npm@${{ env.NPM_VERSION }} --registry=https://registry.npmjs.org

      - id: "image_name"
        name: "Extract repo name and update IMAGE_NAME"
        run: |-
          REPO_DOMAIN=$(echo $IMAGE_REPO | cut -d '/' -f 1)
          case $REPO_DOMAIN in
            *gcr.io)
              GCR_DOMAIN=$REPO_DOMAIN
              GAR_DOMAIN=$(echo $GAR_DEFAULT_REPO | cut -d '/' -f 1)
              GCR_IMAGE_REPO=$IMAGE_REPO
              GAR_IMAGE_REPO=$GAR_DEFAULT_REPO ;;
            *pkg.dev)
              GCR_DOMAIN=$(echo $GCR_DEFAULT_REPO | cut -d '/' -f 1)
              GAR_DOMAIN=$REPO_DOMAIN
              GCR_IMAGE_REPO=$GCR_DEFAULT_REPO
              GAR_IMAGE_REPO=$IMAGE_REPO ;;
          esac

          GCR_IMAGE_NAME=$GCR_IMAGE_REPO"/"${{ github.event.repository.name }}
          GAR_IMAGE_NAME=$GAR_IMAGE_REPO"/"${{ github.event.repository.name }}

          if [ "$GAR_ENABLED" == "true" ]
          then
            IMAGE_NAME=$GAR_IMAGE_NAME
          else
            IMAGE_NAME=$GCR_IMAGE_NAME
          fi

          echo "gcr_domain=$GCR_DOMAIN" >> $GITHUB_OUTPUT
          echo "gar_domain=$GAR_DOMAIN" >> $GITHUB_OUTPUT
          echo "gcr_image_repo=$GCR_IMAGE_REPO" >> $GITHUB_OUTPUT
          echo "gar_image_repo=$GAR_IMAGE_REPO" >> $GITHUB_OUTPUT
          echo "gcr_image_name=$GCR_IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "gar_image_name=$GAR_IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - id: "app_names"
        name: "Get app_names if necessary"
        run: |-
          if [[ -z "${APP_NAMES}" ]]; then
            APP_NAMES=${{ github.event.repository.name }}
          fi
          echo "app_names=$APP_NAMES" >> $GITHUB_OUTPUT

      - name: Get stage.env file
        run: |-
          if [[ $APP_NAMES == *","* ]]; then
              IFS=',' read -r -a array_app_names <<< "$APP_NAMES"
              for app_name in "${array_app_names[@]}"
              do
                cat "deployment_envs/$app_name/stage.env" > $HOME/$app_name-stage-copy.env
              done
          else
            cat "deployment_envs/stage.env" > $HOME/stage-copy.env
          fi

      - id: get_image_tag
        name: Get image tag from branch name and commitId
        run: |-
          FIXED_BRANCH_NAME=$(echo "$BRANCH_NAME" | tr / -)
          TAG=$FIXED_BRANCH_NAME-$(git rev-parse --short HEAD)
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Export Home
        run: echo "HOME=/root" >> $GITHUB_ENV

      ##  Needs to be added so as to pull common Libs from bitbucket ##
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.BB_SSH_KEY }}
          name: id_rsa
          known_hosts: bitbucket.org
          if_key_exists: ignore

      - name: Cache dependencies
        uses: actions/cache@v3.2.2
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-

       ### Authentings with Google Cloud to Push Image to GCR ###
      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v2"
        with:
          token_format: "access_token"
          workload_identity_provider: "${{ secrets.WIF_PROVIDER_NAME }}"
          service_account: ${{ secrets.GSA_GCR_EMAIL }}

      - name: Install npm Packages
        run: |
          if grep -q artifactregistry-login "package.json"; then
            npm run artifactregistry-login -- --credential-config .npmrc
          fi
          $NPM_INSTALL_COMMAND

      - name: Lint
        if: ${{ env.LINT_COMMAND }}
        run: $LINT_COMMAND

      - name: Test
        if: ${{ env.TEST_COMMAND }}
        run: $TEST_COMMAND

      - name: build
        if: ${{ env.BUILD_COMMAND }}
        run: $BUILD_COMMAND

      - name: "Authenticating docker to push to gcr"
        if: ${{ env.GCR_ENABLED == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: "${{ steps.image_name.outputs.GCR_DOMAIN }}"
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"

      - name: "Authenticating docker to push to gar"
        if: ${{ env.GAR_ENABLED == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: "${{ steps.image_name.outputs.GAR_DOMAIN }}"
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"

      - name: Docker build
        run: |-
          echo "$SSH_KEY" > id_rsa
          docker build -t "${GCR_IMAGE_NAME}:${TAGS}" -t "${GAR_IMAGE_NAME}:${TAGS}" .
        shell: bash
        env:
          SSH_KEY: ${{ secrets.BB_SSH_KEY }}
          TAGS: ${{ steps.get_image_tag.outputs.image_tag }}
          GCR_IMAGE_NAME: ${{ steps.image_name.outputs.gcr_image_name }}
          GAR_IMAGE_NAME: ${{ steps.image_name.outputs.gar_image_name }}

      - name: Docker push to GCR
        if: ${{ env.GCR_ENABLED == 'true' }}
        run: |-
          docker push "${IMAGE_NAME}:${TAGS}"
        shell: bash
        env:
          TAGS: ${{ steps.get_image_tag.outputs.image_tag }}
          IMAGE_NAME: ${{ steps.image_name.outputs.gcr_image_name }}

      - name: Docker push to GAR
        if: ${{ env.GAR_ENABLED == 'true' }}
        run: |-
          docker push "${IMAGE_NAME}:${TAGS}"
        shell: bash
        env:
          TAGS: ${{ steps.get_image_tag.outputs.image_tag }}
          IMAGE_NAME: ${{ steps.image_name.outputs.gar_image_name }}

      ##Deploy to stage
      - name: "Checkout k8s manifests"
        uses: actions/checkout@v4
        with:
          repository: ${{ env.K8S_MANIFESTS_REPO }}
          token: ${{ secrets.ULTIMATE_GITHUB_PAT }}

      - name: Update the Image tags for stage Environment
        run: |-
            if [[ $APP_NAMES == *","* ]]; then
              IFS=',' read -r -a array_app_names <<< "$APP_NAMES"
              for app_name in "${array_app_names[@]}"
              do
                cd $APP_SQUAD/$app_name/overlay/${K8S_ENV_NAME}
                cat $HOME/$app_name-stage-copy.env > stage.env
                kustomize edit set image app=${IMAGE_NAME}:${TAG}
                cat kustomization.yaml
                git config --local user.email $GITHUB_EMAIL
                git config --local user.name $GITHUB_USER
                git commit -m "update $app_name image to ${IMAGE_NAME}:${TAG}" -a
                git push ${REMOTE_REPO} HEAD:main --force
                cd ../../../../
              done
            else
              cd $APP_SQUAD/${APP_NAMES}/overlay/${K8S_ENV_NAME}
              cat $HOME/stage-copy.env > stage.env
              kustomize edit set image app=${IMAGE_NAME}:${TAG}
              cat kustomization.yaml
              git config --local user.email $GITHUB_EMAIL
              git config --local user.name $GITHUB_USER
              git commit -m "update image to ${IMAGE_NAME}:${TAG}" -a
              git push ${REMOTE_REPO} HEAD:main --force
            fi
        env:
          TAG: ${{ steps.get_image_tag.outputs.image_tag }}
          REMOTE_REPO: https://${{ secrets.ULTIMATE_GITHUB_PAT }}@github.com/${{ env.K8S_MANIFESTS_REPO }}.git
          K8S_ENV_NAME: staging
          IMAGE_NAME: ${{ steps.image_name.outputs.image_name }}
          APP_NAMES: ${{ steps.app_names.outputs.app_names }}
