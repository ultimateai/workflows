name: Rollback

on:
  workflow_call:
    inputs:
        image_repo:
          required: true
          type: string
          description: "Your container registry repository - like europe-docker.pkg.dev/$project_id/$repo_id"
        app_squad:
          required: true
          type: string
          description: "Your app Squad - where your app is located inside argoCD (backend, ai, qa...)"
        environment:
          required: true
          type: string
          description: "In which environment do you want to deploy"
        version:
          required: true
          type: string
          description: "Which tag do you want to deploy - if none, workflow will fail"
        github_email:
          required: true
          type: string
          description: "Automatic CI/CD commits will be done by this email"
        github_user:
          required: true
          type: string
          description: "Automatic CI/CD commits will be done by this user"
        k8s_manifests_repo:
          required: true
          type: string
          description: "Owner and repo name containing your k8s manifests - like ultimateai/k8s-manifests"
        slack_channel_id:
          required: false
          type: string
          default: "#plt-239"
          description: "Slack channel ID where you want your notifications"
        region:
          required: false
          type: string
          description: "Region name to deploy - europe or us-central1, defaults to europe"
          default: "europe"


env:
  IMAGE_REPO: ${{ inputs.image_repo }}
  APP_SQUAD: ${{ inputs.app_squad }}
  ENVIRONMENT: ${{ inputs.environment }}
  VERSION: ${{ inputs.version }}
  GITHUB_EMAIL: ${{ inputs.github_email }}
  GITHUB_USER: ${{ inputs.github_user }}
  K8S_MANIFESTS_REPO: ${{ inputs.k8s_manifests_repo }}
  SLACK_CHANNEL_ID: ${{ inputs.slack_channel_id }}
  GCR_ENABLED: ${{ vars.GCR_ENABLED || 'true' }}
  GAR_ENABLED: ${{ vars.GAR_ENABLED || 'true' }}
  GCR_DEFAULT_REPO: ${{ vars.GCR_DEFAULT_REPO }}
  GAR_DEFAULT_REPO: ${{ vars.GAR_DEFAULT_REPO }}
  REGION: ${{ inputs.region }}
  AVAILABLE_REGIONS_FOR_DEPLOYMENT: ${{ vars.AVAILABLE_REGIONS_FOR_DEPLOYMENT }}

jobs:
  deploy_rollback:
    name: Rollback k8s manifest repo for ${{ inputs.ENVIRONMENT }} deployment
    runs-on: preemptible-runners
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.version }}
      
      - name: Check if region is valid
        run: |-
          if [[ " ${AVAILABLE_REGIONS_FOR_DEPLOYMENT[*]} " =~ ${{ env.REGION }} ]]; then
            echo "This region - ${{ env.REGION }} - is allowed"
          else
            echo "Region - ${{ env.REGION }} - is not yet supported. Supported regions are: ${AVAILABLE_REGIONS_FOR_DEPLOYMENT[*]}"
            echo "::error::Region - ${{ env.REGION }} - is not yet supported. Supported regions are: ${AVAILABLE_REGIONS_FOR_DEPLOYMENT[*]}"
            exit 1
          fi

      - id: "image_name"
        name: "Extract repo name and update IMAGE_NAME"
        run: |-
          REPO_DOMAIN=$(echo $IMAGE_REPO | cut -d '/' -f 1)
          case $REPO_DOMAIN in
            *gcr.io)
              GCR_DOMAIN=$REPO_DOMAIN
              GAR_DOMAIN=$(echo $GAR_DEFAULT_REPO | cut -d '/' -f 1)
              GCR_IMAGE_REPO=$IMAGE_REPO
              GAR_IMAGE_REPO=$GAR_DEFAULT_REPO ;;
            *pkg.dev)
              GCR_DOMAIN=$(echo $GCR_DEFAULT_REPO | cut -d '/' -f 1)
              GAR_DOMAIN=$REPO_DOMAIN
              GCR_IMAGE_REPO=$GCR_DEFAULT_REPO
              GAR_IMAGE_REPO=$IMAGE_REPO ;;
          esac

          GCR_IMAGE_NAME=$GCR_IMAGE_REPO"/"${{ github.event.repository.name }}
          GAR_IMAGE_NAME=$GAR_IMAGE_REPO"/"${{ github.event.repository.name }}

          if [ "$GAR_ENABLED" == "true" ]
          then
            IMAGE_NAME=$GAR_IMAGE_NAME
          else
            IMAGE_NAME=$GCR_IMAGE_NAME
          fi

          echo "gcr_domain=$GCR_DOMAIN" >> $GITHUB_OUTPUT
          echo "gar_domain=$GAR_DOMAIN" >> $GITHUB_OUTPUT
          echo "gcr_image_repo=$GCR_IMAGE_REPO" >> $GITHUB_OUTPUT
          echo "gar_image_repo=$GAR_IMAGE_REPO" >> $GITHUB_OUTPUT
          echo "gcr_image_name=$GCR_IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "gar_image_name=$GAR_IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - id: fetch_latest_release
        uses: ultimateai/fetch-latest-release@2.1.1
        with:
          github_token: ${{ secrets.ULTIMATE_GITHUB_PAT }}

      - id: tag_to_deploy
        name: Calculate version to deploy
        run: |-
          TAG=$VERSION
          echo '::set-output name=tag::'$TAG

      - name: Get environment.env file for updating k8s-manifest repo for europe region
        if: ${{ env.REGION == 'europe' }}
        run: |-
          if [[ "${ENVIRONMENT}" = "production" ]]; then
            cat "deployment_envs/prod.env" > $HOME/envfile.env
            cat "deployment_schedules/prod" > $HOME/scheduler
          elif [[ "${ENVIRONMENT}" = "staging" ]]; then
            cat "deployment_envs/stage.env" > $HOME/envfile.env
            cat "deployment_schedules/stage" > $HOME/scheduler
          else
            cat "deployment_envs/dev.env" > $HOME/envfile.env
            cat "deployment_schedules/dev" > $HOME/cheduler
          fi
          if [[ -f "deployment_envs/common.env" ]]; then
            echo "Please delete deployment_envs/common.env" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Get environment.env file for updating k8s-manifest repo for us region
        if: ${{ env.REGION != 'europe' }}
        run: |-
          if [[ "${ENVIRONMENT}" = "production" ]]; then
            cat "deployment_envs/region/${{ env.REGION }}/prod.env" > $HOME/envfile.env
            cat "deployment_schedules/region/${{ env.REGION }}/prod" > $HOME/scheduler
          elif [[ "${ENVIRONMENT}" = "staging" ]]; then
            cat "deployment_envs/region/${{ env.REGION }}/stage.env" > $HOME/envfile.env
            cat "deployment_schedules/region/${{ env.REGION }}/stage" > $HOME/scheduler
          else
            cat "deployment_envs/region/${{ env.REGION }}/dev.env" > $HOME/envfile.env
            cat "deployment_schedules/region/${{ env.REGION }}/dev" > $HOME/cheduler
          fi
          if [[ -f "deployment_envs/region/${{ env.REGION }}/common.env" ]]; then
            echo "Please delete deployment_envs/region/${{ env.REGION }}/common.env" >> $GITHUB_STEP_SUMMARY
          fi

      - name: "Checkout k8s manifests"
        uses: actions/checkout@v4
        with:
          repository: ${{ env.K8S_MANIFESTS_REPO }}
          token: ${{ secrets.ULTIMATE_GITHUB_PAT }}

      - name: Check if version is already deployed in stage, if trying to deploy in prod
        if: ${{ (env.ENVIRONMENT == 'production') }}
        run: |-
          STAGE_VERSION=$(cat $APP_SQUAD/${{ github.event.repository.name }}/overlay/staging/kustomization.yaml | yq .images.0.newTag)
          if [[ ! "${STAGE_VERSION}" = "${TAGS}" ]]; then
            echo "Stage version is $STAGE_VERSION and you want to deploy to production $TAGS. Please, deploy to staging env first"
            echo "Stage version is $STAGE_VERSION and you want to deploy to production $TAGS. Please, deploy to staging env first" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
        env:
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}

      - name: Check old deployed version in env to improve slack message
        id: get_old_version
        run: |-
          OLD_VERSION=$(cat $APP_SQUAD/${{ github.event.repository.name }}/overlay/$ENVIRONMENT/kustomization.yaml | yq .images.0.newTag)
          echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
        env:
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}

      - name: Update the Image tags for Selected Environment for Europe region
        if: ${{ env.REGION == 'europe' }}
        run: |-
          cd $APP_SQUAD/${{ github.event.repository.name }}/overlay/$ENVIRONMENT
          FILE_ENV=$(ls | grep ".env");cat $HOME/envfile.env > $FILE_ENV
          export TAG=${TAGS}; yq eval '(.labels[] | select(.pairs."app.kubernetes.io/name" != null).pairs."tags.datadoghq.com/version") = env(TAG)' -i kustomization.yaml
          kustomize edit set image app=${IMAGE_NAME}:${TAGS}
          scheduler=$(cat $HOME/scheduler)
          yq ".spec.schedule = \"$scheduler\"" -i cronjob.yaml
          cat kustomization.yaml
          git config --local user.email $GITHUB_EMAIL
          git config --local user.name $GITHUB_USER
          git commit -m "update image to ${IMAGE_NAME}:${TAGS}" -a || echo "Nothing to commit, version ${TAGS} is already deployed to $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
          git push ${REMOTE_REPO} HEAD:main --force
        env:
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}
          REMOTE_REPO: https://${{ secrets.ULTIMATE_GITHUB_PAT }}@github.com/${{ env.K8S_MANIFESTS_REPO }}.git
          IMAGE_NAME: ${{ steps.image_name.outputs.image_name }}
      
      - name: Update the Image tags for Selected Environment for non europe region
        if: ${{ env.REGION != 'europe' }}
        run: |-
          cd $APP_SQUAD/${{ github.event.repository.name }}/region/${REGION}/$ENVIRONMENT
          FILE_ENV=$(ls | grep ".env");cat $HOME/envfile.env > $FILE_ENV
          export TAG=${TAGS}; yq eval '(.labels[] | select(.pairs."app.kubernetes.io/name" != null).pairs."tags.datadoghq.com/version") = env(TAG)' -i kustomization.yaml
          kustomize edit set image app=${IMAGE_NAME}:${TAGS}
          scheduler=$(cat $HOME/scheduler)
          yq ".spec.schedule = \"$scheduler\"" -i cronjob.yaml
          cat kustomization.yaml
          git config --local user.email $GITHUB_EMAIL
          git config --local user.name $GITHUB_USER
          git commit -m "update image to ${IMAGE_NAME}:${TAGS}" -a || echo "Nothing to commit, version ${TAGS} is already deployed to $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
          git push ${REMOTE_REPO} HEAD:main --force
        env:
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}
          REMOTE_REPO: https://${{ secrets.ULTIMATE_GITHUB_PAT }}@github.com/${{ env.K8S_MANIFESTS_REPO }}.git
          IMAGE_NAME: ${{ steps.image_name.outputs.image_name }}

      - uses: slackapi/slack-github-action@v1.24.0
        name: Slack notification
        id: slack_notif_rollback
        if: ${{ env.ENVIRONMENT == 'production' }}
        with:
          channel-id: ${{ env.SLACK_CHANNEL_ID }}
          payload: |-
            {
              "text": "Manual rollback",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Deployment of `${{ github.event.repository.name }}` to `${{ env.ENVIRONMENT }}` by ${{ github.actor }} , `${{ env.OLD_VERSION }}` -> `${{ env.TAGS }}` \n *WARNING!!* This is a rollback! Please add any information under this thread. "
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secretsSLACK_GITHUB_ZENDESK_APP_TOKEN }}
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}
          LATEST_TAG: ${{ steps.fetch_latest_release.outputs.tag_name }}
          IMAGE_NAME: ${{ steps.image_name.outputs.image_name }}
          OLD_VERSION: ${{ steps.get_old_version.outputs.old_version }}

      - uses: slackapi/slack-github-action@v1.24.0
        name: Threaded slack notification for version comparison
        if: ${{ env.ENVIRONMENT == 'production' }}
        id: slack_threaded_version
        with:
          channel-id: ${{ env.SLACK_CHANNEL_ID }}
          payload: |-
            {
              "text": "Manual deployment",
              "thread_ts": "${{ steps.slack_notif_rollback.outputs.thread_ts }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Version comparison:\n https://github.com/${{ github.event.repository.full_name }}/compare/${{ env.TAGS }}...${{ env.OLD_VERSION }}"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secretsSLACK_GITHUB_ZENDESK_APP_TOKEN }}
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}
          LATEST_TAG: ${{ steps.fetch_latest_release.outputs.tag_name }}
          OLD_VERSION: ${{ steps.get_old_version.outputs.old_version }}
