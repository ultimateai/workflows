name: Manual deploy

on:
  workflow_call:
    inputs:
        image_repo:
          required: true
          type: string
          description: "Your container registry repository - like eu.gcr.io/ultimateai-169214"
        app_squad:
          required: true
          type: string
          description: "Your app Squad - where your app is located inside argoCD (backend, ai, qa...)"
        environment:
          required: true
          type: string
          description: "In which environment do you want to deploy"
        github_email:
          required: true
          type: string
          description: "Automatic CI/CD commits will be done by this email"
        github_user:
          required: true
          type: string
          description: "Automatic CI/CD commits will be done by this user"
        k8s_manifests_repo:
          required: true
          type: string
          description: "Owner and repo name containing your k8s manifests - like ultimateai/k8s-manifests"
        run_e2e_tests:
          required: false
          type: string
          description: "Wether to execute or not e2e tests - if yes, staging cluster name, testim_project, testim_grid and testim_suite must be provided"
          default: "false"
        staging_cluster_name:
          required: false
          type: string
          description: "Cluster name of stage environment, where e2e test will be run"
        staging_cluster_location:
          required: false
          type: string
          description: "Location of cluster in stage environment"
        testim_project:
          required: false
          type: string
          description: "Testim project ID"
        testim_grid:
          required: false
          type: string
          description: "Testim grid"
        testim_suite:
          required: false
          type: string
          description: "Testim suite"
        testim_additional_flags:
          required: false 
          type: string
          description: "Additional flags for testim cli (--turbo-mode --parallel 2)"
        max_status_tries:
          required: false 
          type: number
          description: "Marks increasing wait time for step checking deployment status"
          default: 12
        app_names:
          required: false
          type: string
          description: "In case you want to deploy to multiple places or your app_name does not coincide with your repo name. format should be like app1,app2,app3"
        slack_channel_id:
          required: false
          type: string
          default: "#plt-239"
          description: "Slack channel ID where you want your notifications"

        
        


env:
  IMAGE_REPO: ${{ inputs.image_repo }}
  APP_SQUAD: ${{ inputs.app_squad }}
  ENVIRONMENT: ${{ inputs.environment }}
  GITHUB_EMAIL: ${{ inputs.github_email }}
  GITHUB_USER: ${{ inputs.github_user }}
  K8S_MANIFESTS_REPO: ${{ inputs.k8s_manifests_repo }}
  RUN_E2E_TESTS: ${{ inputs.run_e2e_tests }}
  STAGING_CLUSTER_NAME: ${{ inputs.staging_cluster_name }}
  STAGING_CLUSTER_LOCATION: ${{ inputs.staging_cluster_location }}
  TESTIM_PROJECT: ${{ inputs.testim_project }}
  TESTIM_GRID: ${{ inputs.testim_grid }}
  TESTIM_SUITE: ${{ inputs.testim_suite }}
  TESTIM_ADDITIONAL_FLAGS: ${{ inputs.testim_additional_flags }}
  MAX_STATUS_TRIES: ${{ inputs.max_status_tries }}
  APP_NAMES: ${{ inputs.app_names }}
  SLACK_CHANNEL_ID: ${{ inputs.slack_channel_id }}


jobs:
  deploy:
    name: Update k8s manifest repo for ${{ inputs.ENVIRONMENT }} deployment
    runs-on: preemptible-runners
    outputs: 
      namespace: ${{ steps.gather_data.outputs.namespace }}
      deployment_name: ${{ steps.gather_data.outputs.deployment_name }}
      environment: ${{ env.ENVIRONMENT }}
      run_e2e_tests: ${{ env.RUN_E2E_TESTS }}
      thread_ts: ${{ steps.slack_notif.outputs.thread_ts }}
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
  
      - id: "image_name"
        name: "Get repo name and update IMAGE_NAME"
        run: |- 
          IMAGE_NAME=$IMAGE_REPO"/"${{ github.event.repository.name }}
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
      
      - id: "app_names"
        name: "Get app_names if necessary"
        run: |- 
          if [[ -z "${APP_NAMES}" ]]; then
            APP_NAMES=${{ github.event.repository.name }}
          else
            SINGLE_APP_NAME=$(echo $APP_NAMES | sed 's/,.*//')
            echo "single_app_name=$SINGLE_APP_NAME" >> $GITHUB_OUTPUT
          fi
          echo "app_names=$APP_NAMES" >> $GITHUB_OUTPUT
          
      - name: Get environment.env file for updating k8s-manifest repo
        run: |-
          if [[ $APP_NAMES == *","* ]]; then
              IFS=',' read -r -a array_app_names <<< "$APP_NAMES"
              for app_name in "${array_app_names[@]}"
              do
                if [[ "${ENVIRONMENT}" = "production" ]]; then
                  cat "deployment_envs/$app_name/prod.env" > $HOME/$app_name-envfile.env
                elif [[ "${ENVIRONMENT}" = "staging" ]]; then
                  cat "deployment_envs/$app_name/stage.env" > $HOME/$app_name-envfile.env
                else
                  cat "deployment_envs/$app_name/dev.env" > $HOME/$app_name-envfile.env
                fi
                if [[ -f "deployment_envs/$app_name/common.env" ]]; then
                  echo "Please delete deployment_envs/$app_name/common.env" >> $GITHUB_STEP_SUMMARY
                fi
              done
          else
            if [[ "${ENVIRONMENT}" = "production" ]]; then
              cat "deployment_envs/prod.env" > $HOME/envfile.env
            elif [[ "${ENVIRONMENT}" = "staging" ]]; then
              cat "deployment_envs/stage.env" > $HOME/envfile.env
            else
              cat "deployment_envs/dev.env" > $HOME/envfile.env
            fi
            if [[ -f "deployment_envs/common.env" ]]; then
              echo "Please delete deployment_envs/common.env" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - id: fetch_latest_release
        uses: ultimateai/fetch-latest-release@2.1.1
        with:
          github_token: ${{ secrets.ULTIMATE_GITHUB_PAT }}

      - id: tag_to_deploy
        name: Calculate version to deploy
        run: |-
          TAG=${{ steps.fetch_latest_release.outputs.tag_name }}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
      
      - name: Changelog content
        id: full_changelog_content
        run: |
          echo "FILE_CONTENT_CHANGELOG<<FEND" >> $GITHUB_ENV
          head -40 CHANGELOG.md | tr -d '"' >> $GITHUB_ENV
          echo "FEND" >> $GITHUB_ENV

      - name: "Checkout k8s manifests"
        uses: actions/checkout@v3
        with:
          repository: ${{ env.K8S_MANIFESTS_REPO }}
          token: ${{ secrets.ULTIMATE_GITHUB_PAT }}
      
      - name: Check if version is already deployed in stage, if trying to deploy in prod
        if: ${{ (env.ENVIRONMENT == 'production') }}
        run: |-
          if [[ "${SINGLE_APP_NAME}" ]]; then
            STAGE_VERSION=$(cat $APP_SQUAD/$SINGLE_APP_NAME/overlay/staging/kustomization.yaml | yq .images.0.newTag)
            if [[ ! "${STAGE_VERSION}" = "${TAGS}" ]]; then
              echo "In $SINGLE_APP_NAME, stage version is $STAGE_VERSION and you want to deploy to production $TAGS. Please, deploy to staging env first"
              echo "In $SINGLE_APP_NAME, stage version is $STAGE_VERSION and you want to deploy to production $TAGS. Please, deploy to staging env first" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          else
            STAGE_VERSION=$(cat $APP_SQUAD/${{ github.event.repository.name }}/overlay/staging/kustomization.yaml | yq .images.0.newTag)
            if [[ ! "${STAGE_VERSION}" = "${TAGS}" ]]; then
              echo "Stage version is $STAGE_VERSION and you want to deploy to production $TAGS. Please, deploy to staging env first"
              echo "Stage version is $STAGE_VERSION and you want to deploy to production $TAGS. Please, deploy to staging env first" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          fi
        env:
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}
          SINGLE_APP_NAME: ${{ steps.app_names.outputs.single_app_name }}

      - name: Check old deployed version in env to improve slack message
        id: get_old_version
        run: |-
          if [[ "${SINGLE_APP_NAME}" ]]; then
            OLD_VERSION=$(cat $APP_SQUAD/$SINGLE_APP_NAME/overlay/$ENVIRONMENT/kustomization.yaml | yq .images.0.newTag)
          else
            OLD_VERSION=$(cat $APP_SQUAD/${{ github.event.repository.name }}/overlay/$ENVIRONMENT/kustomization.yaml | yq .images.0.newTag)
          fi
          echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT 
        env:
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}
          SINGLE_APP_NAME: ${{ steps.app_names.outputs.single_app_name }}

      - name: Changelog content
        id: filter_changelog
        run: |
          echo "FILTERED_CHANGELOG_CONTENT<<IPO" >> $GITHUB_ENV
          echo "${{ env.FILE_CONTENT_CHANGELOG }}" | sed '/\.\.\.${{ env.OLD_VERSION }}/q' >> $GITHUB_ENV
          echo "IPO" >> $GITHUB_ENV
        env:
          OLD_VERSION: ${{ steps.get_old_version.outputs.old_version }}

      - name: Changelog content for json
        id: changelog_json_content
        run: |
          JSON_CONTENT=$(echo "${{ env.FILTERED_CHANGELOG_CONTENT }}" | sed 's/$/\\n/' | tr -d '\n')
          echo "changelog_json=$JSON_CONTENT" >> $GITHUB_OUTPUT
          
      - name: Update the Image tags and env files for Selected Environment
        run: |-
          if [[ $APP_NAMES == *","* ]]; then
            IFS=',' read -r -a array_app_names <<< "$APP_NAMES"
            for app_name in "${array_app_names[@]}"
            do
              cd $APP_SQUAD/$app_name/overlay/$ENVIRONMENT
              FILE_ENV=$(ls | grep ".env");cat $HOME/$app_name-envfile.env > $FILE_ENV
              kustomize edit set image app=${IMAGE_NAME}:${TAGS}
              cat kustomization.yaml
              git config --local user.email $GITHUB_EMAIL
              git config --local user.name $GITHUB_USER
              git commit -m "update $app_name image to ${IMAGE_NAME}:${TAGS}" -a || echo "Nothing to commit, $app_name version ${TAGS} is already deployed to $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
              git push ${REMOTE_REPO} HEAD:main --force 
              cd ../../../../
            done 
          else
            if [[ "${SINGLE_APP_NAME}" ]]; then
              cd $APP_SQUAD/$SINGLE_APP_NAME/overlay/$ENVIRONMENT
            else
              cd $APP_SQUAD/${APP_NAMES}/overlay/$ENVIRONMENT
            fi
            FILE_ENV=$(ls | grep ".env");cat $HOME/envfile.env > $FILE_ENV
            kustomize edit set image app=${IMAGE_NAME}:${TAGS}
            cat kustomization.yaml
            git config --local user.email $GITHUB_EMAIL
            git config --local user.name $GITHUB_USER
            git commit -m "update image to ${IMAGE_NAME}:${TAGS}" -a || echo "Nothing to commit, version ${TAGS} is already deployed to $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
            git push ${REMOTE_REPO} HEAD:main --force 
          fi
        env:
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}
          REMOTE_REPO: https://${{ secrets.ULTIMATE_GITHUB_PAT }}@github.com/${{ env.K8S_MANIFESTS_REPO }}.git
          IMAGE_NAME: ${{ steps.image_name.outputs.image_name }}
          APP_NAMES: ${{ steps.app_names.outputs.app_names }}
          SINGLE_APP_NAME: ${{ steps.app_names.outputs.single_app_name }}

      - uses: slackapi/slack-github-action@v1.23.0
        name: Slack notification
        id: slack_notif
        if: ${{ env.ENVIRONMENT == 'production' }} 
        with:
          channel-id: ${{ env.SLACK_CHANNEL_ID }}
          payload: |-
            {
              "text": "Manual deployment",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Deployment of `${{ github.event.repository.name }}` to `${{ env.ENVIRONMENT }}` by ${{ github.actor }} , `${{ env.OLD_VERSION }}` -> `${{ env.TAGS }}`"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_GITHUB_BOT_TOKEN }}
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}
          LATEST_TAG: ${{ steps.fetch_latest_release.outputs.tag_name }}
          IMAGE_NAME: ${{ steps.image_name.outputs.image_name }}
          OLD_VERSION: ${{ steps.get_old_version.outputs.old_version }}

      - uses: slackapi/slack-github-action@v1.23.0
        name: Threaded slack notification for version comparison
        if: ${{ env.ENVIRONMENT == 'production' }} 
        id: slack_threaded_version
        with:
          channel-id: ${{ env.SLACK_CHANNEL_ID }}
          payload: |-
            {
              "text": "Manual deployment",
              "thread_ts": "${{ steps.slack_notif.outputs.thread_ts }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Changelog: \n ${{ env.JSON_CHANGELOG_CONTENT }}"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_GITHUB_BOT_TOKEN }}
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}
          JSON_CHANGELOG_CONTENT: ${{ steps.changelog_json_content.outputs.changelog_json }}
      
      
      - name: Gather relevant data for e2e testim tests
        id: gather_data
        if: ${{ (env.ENVIRONMENT == 'staging') && (env.RUN_E2E_TESTS == 'true') }} 
        run: |-
          NAMESPACE=$(cat $APP_SQUAD/${{ github.event.repository.name }}/overlay/$ENVIRONMENT/kustomization.yaml | yq .namespace)
          if [[ -z "${SINGLE_APP_NAME}" ]]; then
            DEPLOYMENT_NAME=$(echo $(cat $APP_SQUAD/${{ github.event.repository.name }}/overlay/$ENVIRONMENT/kustomization.yaml | yq .namePrefix)deployment)
          else
            DEPLOYMENT_NAME=$(echo $(cat $APP_SQUAD/$SINGLE_APP_NAME/overlay/$ENVIRONMENT/kustomization.yaml | yq .namePrefix)deployment)
          fi
          echo "namespace=$NAMESPACE" >> $GITHUB_OUTPUT
          echo "deployment_name=$DEPLOYMENT_NAME" >> $GITHUB_OUTPUT
        env:
          SINGLE_APP_NAME: ${{ steps.app_names.outputs.single_app_name }}

  run-e2e-test:
    needs: deploy
    if: ${{ needs.deploy.outputs.environment == 'staging' && needs.deploy.outputs.run_e2e_tests == 'true' }}
    name: run end to end tests
    uses: ultimateai/qe-workflows/.github/workflows/playwright-e2e-tests.yml@main
    with:
      e2e_repo: ultimateai/e2e-tests
      projects: '["chromium","firefox"]'
    secrets: inherit
