name: Manual deploy

on:
  workflow_call:
    inputs:
        image_repo:
          required: true
          type: string
          description: "Your container registry repository - like europe-docker.pkg.dev/$project_id/$repo_id"
        app_squad:
          required: true
          type: string
          description: "Your app Squad - where your app is located inside argoCD (backend, ai, qa...)"
        environment:
          required: true
          type: string
          description: "In which environment do you want to deploy"
        github_email:
          required: true
          type: string
          description: "Automatic CI/CD commits will be done by this email"
        github_user:
          required: true
          type: string
          description: "Automatic CI/CD commits will be done by this user"
        k8s_manifests_repo:
          required: true
          type: string
          description: "Owner and repo name containing your k8s manifests - like ultimateai/k8s-manifests"
        run_e2e_tests:
          required: false
          type: string
          description: "Wether to execute or not e2e tests"
          default: "false"
        app_names:
          required: false
          type: string
          description: "In case you want to deploy to multiple places or your app_name does not coincide with your repo name. format should be like app1,app2,app3"
        slack_channel_id:
          required: false
          type: string
          default: "#plt-239"
          description: "Slack channel ID where you want your notifications"
        e2e_repo:
          required: true
          type: string
          description: "Repository containing your e2e tests"
        e2e_projects:
          required: true
          type: string
          description: "Projects for matrix in e2e sharding - chromium, firefox..."
        e2e_bucket_name:
          required: true
          type: string
          description: "Bucket in which to store e2e results"
        region:
          required: false
          type: string
          description: "Region name to deploy - europe or us-central1, defaults to europe"
          default: "europe"


env:
  IMAGE_REPO: ${{ inputs.image_repo }}
  APP_SQUAD: ${{ inputs.app_squad }}
  ENVIRONMENT: ${{ inputs.environment }}
  GITHUB_EMAIL: ${{ inputs.github_email }}
  GITHUB_USER: ${{ inputs.github_user }}
  K8S_MANIFESTS_REPO: ${{ inputs.k8s_manifests_repo }}
  RUN_E2E_TESTS: ${{ inputs.run_e2e_tests }}
  APP_NAMES: ${{ inputs.app_names }}
  SLACK_CHANNEL_ID: ${{ inputs.slack_channel_id }}
  E2E_REPO: ${{ inputs.e2e_repo }}
  E2E_PROJECTS: ${{ inputs.e2e_projects }}
  E2E_BUCKET_NAME: ${{ inputs.e2e_bucket_name }}
  GCR_ENABLED: ${{ vars.GCR_ENABLED || 'true' }}
  GAR_ENABLED: ${{ vars.GAR_ENABLED || 'true' }}
  GCR_DEFAULT_REPO: ${{ vars.GCR_DEFAULT_REPO }}
  GAR_DEFAULT_REPO: ${{ vars.GAR_DEFAULT_REPO }}
  REGION: ${{ inputs.region }}


jobs:
  deploy:
    name: Update k8s manifest repo for ${{ inputs.ENVIRONMENT }} deployment
    runs-on: preemptible-runners
    outputs:
      environment: ${{ env.ENVIRONMENT }}
      run_e2e_tests: ${{ env.RUN_E2E_TESTS }}
      e2e_repo: ${{ env.E2E_REPO }}
      e2e_projects: ${{ env.E2E_PROJECTS }}
      e2e_bucket_name: ${{ env.E2E_BUCKET_NAME }}
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Region Validation
        if: ${{ env.REGION != 'europe' && env.REGION != 'us-central1' }}
        run: |
          echo "Region must be either 'europe' or 'us-central1'."
          echo "Region must be either 'europe' or 'us-central1'." >> $GITHUB_STEP_SUMMARY
          exit 1

      - id: "image_name"
        name: "Extract repo name and update IMAGE_NAME"
        run: |-
          REPO_DOMAIN=$(echo $IMAGE_REPO | cut -d '/' -f 1)
          case $REPO_DOMAIN in
            *gcr.io)
              GCR_DOMAIN=$REPO_DOMAIN
              GAR_DOMAIN=$(echo $GAR_DEFAULT_REPO | cut -d '/' -f 1)
              GCR_IMAGE_REPO=$IMAGE_REPO
              GAR_IMAGE_REPO=$GAR_DEFAULT_REPO ;;
            *pkg.dev)
              GCR_DOMAIN=$(echo $GCR_DEFAULT_REPO | cut -d '/' -f 1)
              GAR_DOMAIN=$REPO_DOMAIN
              GCR_IMAGE_REPO=$GCR_DEFAULT_REPO
              GAR_IMAGE_REPO=$IMAGE_REPO ;;
          esac

          GCR_IMAGE_NAME=$GCR_IMAGE_REPO"/"${{ github.event.repository.name }}
          GAR_IMAGE_NAME=$GAR_IMAGE_REPO"/"${{ github.event.repository.name }}

          if [ "$GAR_ENABLED" == "true" ]
          then
            IMAGE_NAME=$GAR_IMAGE_NAME
          else
            IMAGE_NAME=$GCR_IMAGE_NAME
          fi

          echo "gcr_domain=$GCR_DOMAIN" >> $GITHUB_OUTPUT
          echo "gar_domain=$GAR_DOMAIN" >> $GITHUB_OUTPUT
          echo "gcr_image_repo=$GCR_IMAGE_REPO" >> $GITHUB_OUTPUT
          echo "gar_image_repo=$GAR_IMAGE_REPO" >> $GITHUB_OUTPUT
          echo "gcr_image_name=$GCR_IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "gar_image_name=$GAR_IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - id: "app_names"
        name: "Get app_names if necessary"
        run: |-
          if [[ -z "${APP_NAMES}" ]]; then
            APP_NAMES=${{ github.event.repository.name }}
          else
            SINGLE_APP_NAME=$(echo $APP_NAMES | sed 's/,.*//')
            echo "single_app_name=$SINGLE_APP_NAME" >> $GITHUB_OUTPUT
          fi
          echo "app_names=$APP_NAMES" >> $GITHUB_OUTPUT

      - name: Get env file and scheduler for updating k8s-manifest repo in case of europe region
        if: ${{ env.REGION == 'europe' }}
        run: |-
          if [[ $APP_NAMES == *","* ]]; then
              IFS=',' read -r -a array_app_names <<< "$APP_NAMES"
              for app_name in "${array_app_names[@]}"
              do
                if [[ "${ENVIRONMENT}" = "production" ]]; then
                  cat "deployment_envs/$app_name/prod.env" > $HOME/$app_name-envfile.env
                elif [[ "${ENVIRONMENT}" = "staging" ]]; then
                  cat "deployment_envs/$app_name/stage.env" > $HOME/$app_name-envfile.env
                else
                  cat "deployment_envs/$app_name/dev.env" > $HOME/$app_name-envfile.env
                fi
                if [[ -f "deployment_envs/$app_name/common.env" ]]; then
                  echo "Please delete deployment_envs/$app_name/common.env" >> $GITHUB_STEP_SUMMARY
                fi
              done
          else
            if [[ "${ENVIRONMENT}" = "production" ]]; then
              cat "deployment_envs/prod.env" > $HOME/envfile.env
            elif [[ "${ENVIRONMENT}" = "staging" ]]; then
              cat "deployment_envs/stage.env" > $HOME/envfile.env
            else
              cat "deployment_envs/dev.env" > $HOME/envfile.env
            fi
            if [[ -f "deployment_envs/common.env" ]]; then
              echo "Please delete deployment_envs/common.env" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Get env file and scheduler for updating k8s-manifest repo in case of non-europe region
        if: ${{ env.REGION != 'europe' }}
        run: |-
          if [[ $APP_NAMES == *","* ]]; then
              IFS=',' read -r -a array_app_names <<< "$APP_NAMES"
              for app_name in "${array_app_names[@]}"
              do
                if [[ "${ENVIRONMENT}" = "production" ]]; then
                  cat "deployment_envs/$app_name/region/$REGION/prod.env" > $HOME/$app_name-envfile.env
                elif [[ "${ENVIRONMENT}" = "staging" ]]; then
                  cat "deployment_envs/$app_name/region/$REGION/stage.env" > $HOME/$app_name-envfile.env
                else
                  cat "deployment_envs/$app_name/region/$REGION/dev.env" > $HOME/$app_name-envfile.env
                fi
                if [[ -f "deployment_envs/$app_name/common.env" ]]; then
                  echo "Please delete deployment_envs/$app_name/region/$REGION/common.env" >> $GITHUB_STEP_SUMMARY
                fi
              done
          else
            if [[ "${ENVIRONMENT}" = "production" ]]; then
              cat "deployment_envs/region/$REGION/prod.env" > $HOME/envfile.env
            elif [[ "${ENVIRONMENT}" = "staging" ]]; then
              cat "deployment_envs/region/$REGION/stage.env" > $HOME/envfile.env
            else
              cat "deployment_envs/region/$REGION/dev.env" > $HOME/envfile.env
            fi
            if [[ -f "deployment_envs/region/$REGION/common.env" ]]; then
              echo "Please delete deployment_envs/common.env" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - id: fetch_latest_release
        uses: ultimateai/fetch-latest-release@2.1.1
        with:
          github_token: ${{ secrets.ULTIMATE_GITHUB_PAT }}

      - id: tag_to_deploy
        name: Calculate version to deploy
        run: |-
          TAG=${{ steps.fetch_latest_release.outputs.tag_name }}
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Changelog content
        id: full_changelog_content
        run: |
          echo "FILE_CONTENT_CHANGELOG<<FEND" >> $GITHUB_ENV
          head -40 CHANGELOG.md | tr -d '"' >> $GITHUB_ENV
          echo "FEND" >> $GITHUB_ENV

      - name: "Checkout k8s manifests"
        uses: actions/checkout@v4
        with:
          repository: ${{ env.K8S_MANIFESTS_REPO }}
          token: ${{ secrets.ULTIMATE_GITHUB_PAT }}

      - name: Check if version is already deployed in stage, if trying to deploy in prod
        if: ${{ (env.ENVIRONMENT == 'production') }}
        run: |-
          if [[ "${SINGLE_APP_NAME}" ]]; then
            STAGE_VERSION=$(cat $APP_SQUAD/$SINGLE_APP_NAME/overlay/staging/kustomization.yaml | yq .images.0.newTag)
            if [[ ! "${STAGE_VERSION}" = "${TAGS}" ]]; then
              echo "In $SINGLE_APP_NAME, stage version is $STAGE_VERSION and you want to deploy to production $TAGS. Please, deploy to staging env first"
              echo "In $SINGLE_APP_NAME, stage version is $STAGE_VERSION and you want to deploy to production $TAGS. Please, deploy to staging env first" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          else
            STAGE_VERSION=$(cat $APP_SQUAD/${{ github.event.repository.name }}/overlay/staging/kustomization.yaml | yq .images.0.newTag)
            if [[ ! "${STAGE_VERSION}" = "${TAGS}" ]]; then
              echo "Stage version is $STAGE_VERSION and you want to deploy to production $TAGS. Please, deploy to staging env first"
              echo "Stage version is $STAGE_VERSION and you want to deploy to production $TAGS. Please, deploy to staging env first" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          fi
        env:
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}
          SINGLE_APP_NAME: ${{ steps.app_names.outputs.single_app_name }}

      - name: Check old deployed version in env to improve slack message
        id: get_old_version
        run: |-
          if [[ "${SINGLE_APP_NAME}" ]]; then
            OLD_VERSION=$(cat $APP_SQUAD/$SINGLE_APP_NAME/overlay/$ENVIRONMENT/kustomization.yaml | yq .images.0.newTag)
          else
            OLD_VERSION=$(cat $APP_SQUAD/${{ github.event.repository.name }}/overlay/$ENVIRONMENT/kustomization.yaml | yq .images.0.newTag)
          fi
          echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
        env:
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}
          SINGLE_APP_NAME: ${{ steps.app_names.outputs.single_app_name }}

      - name: Changelog content
        id: filter_changelog
        run: |
          echo "FILTERED_CHANGELOG_CONTENT<<IPO" >> $GITHUB_ENV
          echo "${{ env.FILE_CONTENT_CHANGELOG }}" | sed '/\.\.\.${{ env.OLD_VERSION }}/q'| tac | sed '1,4 d' | tac  >> $GITHUB_ENV
          echo "IPO" >> $GITHUB_ENV
        env:
          OLD_VERSION: ${{ steps.get_old_version.outputs.old_version }}

      - name: Changelog content for json
        id: changelog_json_content
        run: |
          JSON_CONTENT=$(echo "${{ env.FILTERED_CHANGELOG_CONTENT }}" | sed 's/$/\\n/' | tr -d '\n')
          echo "changelog_json=$JSON_CONTENT" >> $GITHUB_OUTPUT

      - name: Update the Image tags and env files for Selected Environment in europe region
        if: ${{ env.REGION == 'europe' }}
        run: |-
          if [[ $APP_NAMES == *","* ]]; then
            IFS=',' read -r -a array_app_names <<< "$APP_NAMES"
            for app_name in "${array_app_names[@]}"
            do
              cd $APP_SQUAD/$app_name/overlay/$ENVIRONMENT
              FILE_ENV=$(ls | grep ".env");cat $HOME/$app_name-envfile.env > $FILE_ENV
              kustomize edit set image app=${IMAGE_NAME}:${TAGS}
              cat kustomization.yaml
              git config --local user.email $GITHUB_EMAIL
              git config --local user.name $GITHUB_USER
              git commit -m "update $app_name image to ${IMAGE_NAME}:${TAGS}" -a || echo "Nothing to commit, $app_name version ${TAGS} is already deployed to $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
              git push ${REMOTE_REPO} HEAD:main --force
              cd ../../../../
            done
          else
            if [[ "${SINGLE_APP_NAME}" ]]; then
              cd $APP_SQUAD/$SINGLE_APP_NAME/overlay/$ENVIRONMENT
            else
              cd $APP_SQUAD/${APP_NAMES}/overlay/$ENVIRONMENT
            fi
            FILE_ENV=$(ls | grep ".env");cat $HOME/envfile.env > $FILE_ENV
            kustomize edit set image app=${IMAGE_NAME}:${TAGS}
            cat kustomization.yaml
            git config --local user.email $GITHUB_EMAIL
            git config --local user.name $GITHUB_USER
            git commit -m "update image to ${IMAGE_NAME}:${TAGS}" -a || echo "Nothing to commit, version ${TAGS} is already deployed to $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
            git push ${REMOTE_REPO} HEAD:main --force
          fi
        env:
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}
          REMOTE_REPO: https://${{ secrets.ULTIMATE_GITHUB_PAT }}@github.com/${{ env.K8S_MANIFESTS_REPO }}.git
          IMAGE_NAME: ${{ steps.image_name.outputs.image_name }}
          APP_NAMES: ${{ steps.app_names.outputs.app_names }}
          SINGLE_APP_NAME: ${{ steps.app_names.outputs.single_app_name }}
    
      - name: Update the Image tags and env files for Selected Environment in non-europe region
        if: ${{ env.REGION != 'europe' }}
        run: |-
          if [[ $APP_NAMES == *","* ]]; then
            IFS=',' read -r -a array_app_names <<< "$APP_NAMES"
            for app_name in "${array_app_names[@]}"
            do
              cd $APP_SQUAD/$app_name/region/$REGION/$ENVIRONMENT
              FILE_ENV=$(ls | grep ".env");cat $HOME/$app_name-envfile.env > $FILE_ENV
              kustomize edit set image app=${IMAGE_NAME}:${TAGS}
              cat kustomization.yaml
              git config --local user.email $GITHUB_EMAIL
              git config --local user.name $GITHUB_USER
              git commit -m "update $app_name image to ${IMAGE_NAME}:${TAGS}" -a || echo "Nothing to commit, $app_name version ${TAGS} is already deployed to $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
              git push ${REMOTE_REPO} HEAD:main --force
              cd ../../../../
            done
          else
            if [[ "${SINGLE_APP_NAME}" ]]; then
              cd $APP_SQUAD/$SINGLE_APP_NAME/region/$REGION/$ENVIRONMENT
            else
              cd $APP_SQUAD/${APP_NAMES}/region/$REGION/$ENVIRONMENT
            fi
            FILE_ENV=$(ls | grep ".env");cat $HOME/envfile.env > $FILE_ENV
            kustomize edit set image app=${IMAGE_NAME}:${TAGS}
            cat kustomization.yaml
            git config --local user.email $GITHUB_EMAIL
            git config --local user.name $GITHUB_USER
            git commit -m "update image to ${IMAGE_NAME}:${TAGS}" -a || echo "Nothing to commit, version ${TAGS} is already deployed to $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
            git push ${REMOTE_REPO} HEAD:main --force
          fi
        env:
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}
          REMOTE_REPO: https://${{ secrets.ULTIMATE_GITHUB_PAT }}@github.com/${{ env.K8S_MANIFESTS_REPO }}.git
          IMAGE_NAME: ${{ steps.image_name.outputs.image_name }}
          APP_NAMES: ${{ steps.app_names.outputs.app_names }}
          SINGLE_APP_NAME: ${{ steps.app_names.outputs.single_app_name }}

      - id: "user_name"
        name: "get full user name from github API"
        run: |-
          echo "https://api.github.com/users/${{ github.actor }}"
          user_full_name=$(curl https://api.github.com/users/${{ github.actor }} | jq ".name" | tr -d '"')
          echo $user_full_name
          if [[ $user_full_name == "null" ]]; then
            echo "user_full_name is null"
            user_full_name=${{ github.actor }}
          fi
          echo "user_full_name=$user_full_name" >> $GITHUB_OUTPUT

      - uses: slackapi/slack-github-action@v1.24.0
        name: Slack notification
        id: slack_notif
        if: ${{ env.ENVIRONMENT == 'production' }}
        with:
          channel-id: ${{ env.SLACK_CHANNEL_ID }}
          payload: |-
            {
              "text": "Manual deployment",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Deployment of `${{ github.event.repository.name }}` to `${{ env.ENVIRONMENT }}` by ${{ env.USER_NAME }}, `${{ env.OLD_VERSION }}` -> `${{ env.TAGS }}`"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_GITHUB_BOT_TOKEN }}
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}
          LATEST_TAG: ${{ steps.fetch_latest_release.outputs.tag_name }}
          IMAGE_NAME: ${{ steps.image_name.outputs.image_name }}
          OLD_VERSION: ${{ steps.get_old_version.outputs.old_version }}
          USER_NAME: ${{ steps.user_name.outputs.user_full_name }}

      - uses: slackapi/slack-github-action@v1.24.0
        name: Threaded slack notification for version comparison
        if: ${{ env.ENVIRONMENT == 'production' }}
        id: slack_threaded_version
        with:
          channel-id: ${{ env.SLACK_CHANNEL_ID }}
          payload: |-
            {
              "text": "Manual deployment",
              "thread_ts": "${{ steps.slack_notif.outputs.thread_ts }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Changelog: \n ${{ env.JSON_CHANGELOG_CONTENT }}"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_GITHUB_BOT_TOKEN }}
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}
          JSON_CHANGELOG_CONTENT: ${{ steps.changelog_json_content.outputs.changelog_json }}

  run-e2e-test:
    needs: deploy
    if: ${{ needs.deploy.outputs.environment == 'staging' && needs.deploy.outputs.run_e2e_tests == 'true' }}
    name: run end to end tests
    uses: ultimateai/qe-workflows/.github/workflows/playwright-e2e-tests.yml@0.2.0
    with:
      e2e_repo: ${{ needs.deploy.outputs.e2e_repo }}
      projects: ${{ needs.deploy.outputs.e2e_projects }}
      e2e_bucket_name: ${{ needs.deploy.outputs.E2E_BUCKET_NAME }}
    secrets: inherit

  e2e-tests-result-slack:
    needs: run-e2e-test
    if: success() || failure()
    name: send slack notification of e2e tests
    runs-on: preemptible-runners
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - id: check_environment
        if: ${{ (env.ENVIRONMENT != 'staging') }}
        name: Make sure this is only executed on staging deployment
        run: |-
          echo "Tests can only be launched on staging environment"
          echo "Tests can only be launched on staging environment" >> $GITHUB_STEP_SUMMARY
          exit 1

      - id: "user_name"
        name: "get full user name from github API"
        run: |-
          echo "https://api.github.com/users/${{ github.actor }}"
          user_full_name=$(curl https://api.github.com/users/${{ github.actor }} | jq ".name" | tr -d '"')
          echo $user_full_name
          if [[ $user_full_name == "null" ]]; then
            echo "user_full_name is null"
            user_full_name=${{ github.actor }}
          fi
          echo "user_full_name=$user_full_name" >> $GITHUB_OUTPUT

      - uses: slackapi/slack-github-action@v1.24.0
        name: Slack notification
        id: slack_notif_e2e
        with:
          channel-id: ${{ env.SLACK_CHANNEL_ID }}
          payload: |-
            {
              "text": "Manual deployment",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Deployment of `${{ github.event.repository.name }}` to `${{ env.ENVIRONMENT }}` by ${{ env.USER_NAME }} - with E2E results inside!"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_GITHUB_BOT_TOKEN }}
          USER_NAME: ${{ steps.user_name.outputs.user_full_name }}

      - name: Slack Notification for e2e failure
        if: ${{ contains(needs.run-e2e-test.result, 'failure') }}
        id: slack_e2e_notif_failure
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ env.SLACK_CHANNEL_ID }}
          payload: |-
            {
              "text": "E2E failed",
              "thread_ts": "${{ steps.slack_notif_e2e.outputs.thread_ts }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":x: E2E failed! Please check your tests result at ${{ env.BUCKET_LINK }}"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_GITHUB_BOT_TOKEN }}
          BUCKET_LINK: ${{ needs.run-e2e-test.outputs.bucket_link }}

      - name: Slack Notification for e2e success
        if: ${{ contains(needs.run-e2e-test.result, 'success') }}
        id: slack_e2e_notif_success
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ env.SLACK_CHANNEL_ID }}
          payload: |-
            {
              "text": "e2e worked",
              "thread_ts": "${{ steps.slack_notif_e2e.outputs.thread_ts }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":white_check_mark: E2E worked! You can see more info at ${{ env.BUCKET_LINK }}"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_GITHUB_BOT_TOKEN }}
          BUCKET_LINK: ${{ needs.run-e2e-test.outputs.bucket_link }}
