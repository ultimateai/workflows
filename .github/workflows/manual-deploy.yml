name: Manual deploy

on:
  workflow_call:
    inputs:
        image_repo:
          required: true
          type: string
          description: "Your container registry repository - like eu.gcr.io/ultimateai-169214"
        app_squad:
          required: true
          type: string
          description: "Your app Squad - where your app is located inside argoCD (backend, ai, qa...)"
        environment:
          required: true
          type: string
          description: "In which environment do you want to deploy"
        github_email:
          required: true
          type: string
          description: "Automatic CI/CD commits will be done by this email"
        github_user:
          required: true
          type: string
          description: "Automatic CI/CD commits will be done by this user"
        k8s_manifests_repo:
          required: true
          type: string
          description: "Owner and repo name containing your k8s manifests - like ultimateai/k8s-manifests"


env:
  IMAGE_REPO: ${{ inputs.image_repo }}
  APP_SQUAD: ${{ inputs.app_squad }}
  ENVIRONMENT: ${{ inputs.environment }}
  GITHUB_EMAIL: ${{ inputs.github_email }}
  GITHUB_USER: ${{ inputs.github_user }}
  K8S_MANIFESTS_REPO: ${{ inputs.k8s_manifests_repo }}


jobs:
  deploy:
    name: Update k8s-manifest repo
    runs-on: self-hosted
    outputs: 
      namespace: ${{ steps.gather_data.namespace }}
      deployment_name: ${{ steps.gather_data.deployment_name }}
      environment: ${{ env.ENVIRONMENT }}
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          
      - id: "image_name"
        name: "Get repo name and update IMAGE_NAME"
        run: |- 
          IMAGE_NAME=$IMAGE_REPO"/"${{ github.event.repository.name }}
          echo $IMAGE_NAME
          echo '::set-output name=image_name::'$IMAGE_NAME

      - id: fetch_latest_release
        uses: gregziegan/fetch-latest-release@v2.0.0
        with:
          github_token: ${{ secrets.ULTIMATE_GITHUB_PAT }}

      - id: tag_to_deploy
        name: Calculate version to deploy
        run: |-
          TAG=${{ steps.fetch_latest_release.outputs.tag_name }}
          echo '::set-output name=tag::'$TAG

      - id: get_changelog_content
        name: Get last changelog lines for slack notif
        run: |-
          CHANGELOG_LINES=$(head -4 CHANGELOG.md)
          echo $CHANGELOG_LINES
          echo '::set-output name=changelog_lines::'$CHANGELOG_LINES

      - name: "Checkout k8s manifests"
        uses: actions/checkout@v3
        with:
          repository: ${{ env.K8S_MANIFESTS_REPO }}
          token: ${{ secrets.ULTIMATE_GITHUB_PAT }}
      
      - name: Check if version is already deployed in stage, if trying to deploy in prod
        run: |-
          if [[ "${ENVIRONMENT}" = "production" ]]; then
            STAGE_VERSION=$(cat $APP_SQUAD/${{ github.event.repository.name }}/overlay/staging/kustomization.yaml | yq .images.0.newTag)
            if [[ ! "${STAGE_VERSION}" = "${TAGS}" ]]; then
              echo "Stage version is $STAGE_VERSION and you want to deploy to production $TAGS. Please, deploy to staging env first"
              exit 1
            fi
          fi
        env:
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}

      - name: Check old deployed version in env to improve slack message
        id: get_old_version
        run: |-
          OLD_VERSION=$(cat $APP_SQUAD/${{ github.event.repository.name }}/overlay/$ENVIRONMENT/kustomization.yaml | yq .images.0.newTag)
          echo '::set-output name=old_version::'$OLD_VERSION
        env:
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}
          
      # - name: Update the Image tags for Selected Environment
      #   run: |-
      #     cd $APP_SQUAD/${{ github.event.repository.name }}/overlay/$ENVIRONMENT
      #     kustomize edit set image app=${IMAGE_NAME}:${TAGS}
      #     cat kustomization.yaml
      #     git config --local user.email $GITHUB_EMAIL
      #     git config --local user.name $GITHUB_USER
      #     git commit -m "update image to ${IMAGE_NAME}:${TAGS}" -a
      #     git push ${REMOTE_REPO} HEAD:main --force 
      #   env:
      #     TAGS: ${{ steps.tag_to_deploy.outputs.tag }}
      #     REMOTE_REPO: https://${{ secrets.ULTIMATE_GITHUB_PAT }}@github.com/${{ env.K8S_MANIFESTS_REPO }}.git
      #     IMAGE_NAME: ${{ steps.image_name.outputs.image_name }}

      - name: Slack Notification for deployment
        id: slack_notif
        if: ${{ env.TAGS == env.LATEST_TAG }}
        uses: slackapi/slack-github-action@v1.19.0
        with:
          payload: "{\"text\":\"Manual deployment\", \"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"Deployment of `${{ github.event.repository.name }}` to `${{ env.ENVIRONMENT }}` by ${{ github.actor }} , `${{ env.OLD_VERSION }}` -> `${{ env.TAGS }}` \\n Changelog -> `${{ env.CHANGELOG_LINES}}`\"}}]}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}
          LATEST_TAG: ${{ steps.fetch_latest_release.outputs.tag_name }}
          IMAGE_NAME: ${{ steps.image_name.outputs.image_name }}
          OLD_VERSION: ${{ steps.get_old_version.outputs.old_version }}
          RELEASE_TITLE: ${{ steps.fetch_latest_release.outputs.name }}
          CHANGELOG_LINES: ${{ steps.get_changelog_content.outputs.changelog_lines }}
      
      - name: Gather relevant data for e2e testim tests
        id: gather_data
        if: ${{ (env.ENVIRONMENT == 'staging') && (1==1) }} 
        run: |-
          NAMESPACE=$(cat $APP_SQUAD/${{ github.event.repository.name }}/overlay/$ENVIRONMENT/kustomization.yaml | yq .namespace)
          DEPLOYMENT_NAME=$(echo $(cat $APP_SQUAD/${{ github.event.repository.name }}/overlay/$ENVIRONMENT/kustomization.yaml | yq .namePrefix)deployment)
          echo '::set-output name=namespace::'$NAMESPACE
          echo '::set-output name=deployment_name::'$DEPLOYMENT_NAME

  run-e2e-test:
    needs: deploy
    if: ${{ needs.deploy.outputs.environment == 'staging' }}
    name: run end to end tests
    runs-on: self-hosted
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/882245702486/locations/global/workloadIdentityPools/github-gke-pool-1/providers/github-provider-1"
          service_account: "github-gke@staging-main-rlc4.iam.gserviceaccount.com"

      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v0'
        with:
          cluster_name: 'ultimateai-staging-main-1'
          location: 'europe-west1'

      - uses: azure/setup-kubectl@v3
        id: install
      
      - id: "check_status"
        name: "Check deployment status in cluster"
        run: |-
          NEXT_WAIT_TIME=0;while [[ $(kubectl get deployment {{ env.DEPLOYMENT_NAME}} -n {{ env.NAMESPACE}} -o jsonpath="{.status.conditions[0].status}")=="False" ]] && [[ $NEXT_WAIT_TIME < {{ env.MAX_KUBECTL_RETRIES}} ]];do sleep $(( NEXT_WAIT_TIME++ ));done;
          FINAL_STATUS=$(kubectl get deployment {{ env.DEPLOYMENT_NAME}} -n {{ env.NAMESPACE}} -o jsonpath="{.status.conditions[0].status}")
          echo "Status of deployment is $FINAL_STATUS"
          echo '::set-output name=final_status::'$FINAL_STATUS
        env:
          NAMESPACE: ${{needs.deploy.outputs.namespace}}
          DEPLOYMENT_NAME: ${{needs.deploy.outputs.deployment_name}}
      
      - id: run_testim
        name: Run testim e2e test if deployment is true
        if: ${{ env.FINAL_STATUS == 'True'}}
        run: |-
          echo "Its trueeeeeee"
        env:
          FINAL_STATUS: ${{ steps.check_status.outputs.final_status }}
      

      - name: Invoke testim suite
        id: testim
        if: ${{ (env.ENVIRONMENT == 'staging') && (1==1) }} 
        uses: ./.github/workflows/testim.yml
        with:
          namespace: ${{ steps.gather_data.outputs.namespace }}
          deployment_name: ${{ steps.gather_data.outputs.deployment_name }}
            

                  

      
