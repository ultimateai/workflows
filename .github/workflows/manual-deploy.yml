name: Manual deploy

on:
  workflow_call:
    inputs:
        image_repo:
          required: true
          type: string
          description: "Your container registry repository - like eu.gcr.io/ultimateai-169214"
        app_squad:
          required: true
          type: string
          description: "Your app Squad - where your app is located inside argoCD (backend, ai, qa...)"
        environment:
          required: true
          type: string
          description: "In which environment do you want to deploy"
        github_email:
          required: true
          type: string
          description: "Automatic CI/CD commits will be done by this email"
        github_user:
          required: true
          type: string
          description: "Automatic CI/CD commits will be done by this user"
        k8s_manifests_repo:
          required: true
          type: string
          description: "Owner and repo name containing your k8s manifests - like ultimateai/k8s-manifests"
        run_e2e_tests:
          required: false
          type: string
          description: "Wether to execute or not e2e tests - if yes, staging cluster name, testim_project, testim_grid and testim_suite must be provided"
          default: "false"
        staging_cluster_name:
          required: false
          type: string
          description: "Cluster name of stage environment, where e2e test will be run"
        staging_cluster_location:
          required: false
          type: string
          description: "Location of cluster in stage environment"
        testim_project:
          required: false
          type: string
          description: "Testim project ID"
        testim_grid:
          required: false
          type: string
          description: "Testim grid"
        testim_suite:
          required: false
          type: string
          description: "Testim suite"
        testim_additional_flags:
          required: false 
          type: string
          description: "Additional flags for testim cli (--turbo-mode --parallel 2)"
        max_status_tries:
          required: false 
          type: number
          description: "Marks increasing wait time for step checking deployment status"
          default: 12
        
        


env:
  IMAGE_REPO: ${{ inputs.image_repo }}
  APP_SQUAD: ${{ inputs.app_squad }}
  ENVIRONMENT: ${{ inputs.environment }}
  GITHUB_EMAIL: ${{ inputs.github_email }}
  GITHUB_USER: ${{ inputs.github_user }}
  K8S_MANIFESTS_REPO: ${{ inputs.k8s_manifests_repo }}
  RUN_E2E_TESTS: ${{ inputs.run_e2e_tests }}
  STAGING_CLUSTER_NAME: ${{ inputs.staging_cluster_name }}
  STAGING_CLUSTER_LOCATION: ${{ inputs.staging_cluster_location }}
  TESTIM_PROJECT: ${{ inputs.testim_project }}
  TESTIM_GRID: ${{ inputs.testim_grid }}
  TESTIM_SUITE: ${{ inputs.testim_suite }}
  TESTIM_ADDITIONAL_FLAGS: ${{ inputs.testim_additional_flags }}
  MAX_STATUS_TRIES: ${{ inputs.max_status_tries }}


jobs:
  deploy:
    name: Update k8s-manifest repo
    runs-on: self-hosted
    outputs: 
      namespace: ${{ steps.gather_data.outputs.namespace }}
      deployment_name: ${{ steps.gather_data.outputs.deployment_name }}
      environment: ${{ env.ENVIRONMENT}}
      run_e2e_tests: ${{ env.RUN_E2E_TESTS}}
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          
      - id: "image_name"
        name: "Get repo name and update IMAGE_NAME"
        run: |- 
          IMAGE_NAME=$IMAGE_REPO"/"${{ github.event.repository.name }}
          echo $IMAGE_NAME
          echo '::set-output name=image_name::'$IMAGE_NAME

      - id: fetch_latest_release
        uses: gregziegan/fetch-latest-release@v2.0.0
        with:
          github_token: ${{ secrets.ULTIMATE_GITHUB_PAT }}

      - id: tag_to_deploy
        name: Calculate version to deploy
        run: |-
          TAG=${{ steps.fetch_latest_release.outputs.tag_name }}
          echo '::set-output name=tag::'$TAG

      - id: get_changelog_content
        name: Get last changelog lines for slack notif
        run: |-
          CHANGELOG_LINES=$(head -4 CHANGELOG.md)
          echo $CHANGELOG_LINES
          echo '::set-output name=changelog_lines::'$CHANGELOG_LINES

      - name: "Checkout k8s manifests"
        uses: actions/checkout@v3
        with:
          repository: ${{ env.K8S_MANIFESTS_REPO }}
          token: ${{ secrets.ULTIMATE_GITHUB_PAT }}
      
      - name: Check if version is already deployed in stage, if trying to deploy in prod
        run: |-
          if [[ "${ENVIRONMENT}" = "production" ]]; then
            STAGE_VERSION=$(cat $APP_SQUAD/${{ github.event.repository.name }}/overlay/staging/kustomization.yaml | yq .images.0.newTag)
            if [[ ! "${STAGE_VERSION}" = "${TAGS}" ]]; then
              echo "Stage version is $STAGE_VERSION and you want to deploy to production $TAGS. Please, deploy to staging env first"
              exit 1
            fi
          fi
        env:
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}

      - name: Check old deployed version in env to improve slack message
        id: get_old_version
        run: |-
          OLD_VERSION=$(cat $APP_SQUAD/${{ github.event.repository.name }}/overlay/$ENVIRONMENT/kustomization.yaml | yq .images.0.newTag)
          echo '::set-output name=old_version::'$OLD_VERSION
        env:
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}
          
      - name: Update the Image tags for Selected Environment
        run: |-
          cd $APP_SQUAD/${{ github.event.repository.name }}/overlay/$ENVIRONMENT
          kustomize edit set image app=${IMAGE_NAME}:${TAGS}
          cat kustomization.yaml
          git config --local user.email $GITHUB_EMAIL
          git config --local user.name $GITHUB_USER
          git commit -m "update image to ${IMAGE_NAME}:${TAGS}" -a
          git push ${REMOTE_REPO} HEAD:main --force 
        env:
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}
          REMOTE_REPO: https://${{ secrets.ULTIMATE_GITHUB_PAT }}@github.com/${{ env.K8S_MANIFESTS_REPO }}.git
          IMAGE_NAME: ${{ steps.image_name.outputs.image_name }}

      - name: Slack Notification for deployment
        id: slack_notif
        if: ${{ env.TAGS == env.LATEST_TAG }}
        uses: slackapi/slack-github-action@v1.19.0
        with:
          payload: "{\"text\":\"Manual deployment\", \"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"Deployment of `${{ github.event.repository.name }}` to `${{ env.ENVIRONMENT }}` by ${{ github.actor }} , `${{ env.OLD_VERSION }}` -> `${{ env.TAGS }}` \\n Changelog -> `${{ env.CHANGELOG_LINES}}`\"}}]}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}
          LATEST_TAG: ${{ steps.fetch_latest_release.outputs.tag_name }}
          IMAGE_NAME: ${{ steps.image_name.outputs.image_name }}
          OLD_VERSION: ${{ steps.get_old_version.outputs.old_version }}
          RELEASE_TITLE: ${{ steps.fetch_latest_release.outputs.name }}
          CHANGELOG_LINES: ${{ steps.get_changelog_content.outputs.changelog_lines }}
      
      - name: Gather relevant data for e2e testim tests
        id: gather_data
        if: ${{ (env.ENVIRONMENT == 'staging') && (1==1) }} 
        run: |-
          NAMESPACE=$(cat $APP_SQUAD/${{ github.event.repository.name }}/overlay/$ENVIRONMENT/kustomization.yaml | yq .namespace)
          DEPLOYMENT_NAME=$(echo $(cat $APP_SQUAD/${{ github.event.repository.name }}/overlay/$ENVIRONMENT/kustomization.yaml | yq .namePrefix)deployment)
          echo '::set-output name=namespace::'$NAMESPACE
          echo '::set-output name=deployment_name::'$DEPLOYMENT_NAME

  run-e2e-test:
    needs: deploy
    if: ${{ needs.deploy.outputs.environment == 'staging' && needs.deploy.outputs.run_e2e_tests == 'true' }}
    name: run end to end tests
    runs-on: self-hosted
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - uses: actions/setup-node@v2
        with:
          node-version: '16.13.0'

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ secrets.STAGING_GKE_WIP }}
          service_account: ${{ secrets.STAGING_GKE_SA }}

      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v0'
        with:
          cluster_name: ${{ env.STAGING_CLUSTER_NAME }}
          location: ${{ env.STAGING_CLUSTER_LOCATION }}

      - uses: azure/setup-kubectl@v3
        id: install
      
      - id: "check_status"
        name: "Check deployment status in cluster"
        run: |-
          echo "Next line is max status tries"
          echo $MAX_STATUS_TRIES
          NEXT_WAIT_TIME=0;while [[ $(kubectl get deployment $DEPLOYMENT_NAME -n $NAMESPACE -o jsonpath="{.status.conditions[0].status}")=="False" ]] && [[ $NEXT_WAIT_TIME -lt $MAX_STATUS_TRIES ]];do echo $NEXT_WAIT_TIME;sleep $(( NEXT_WAIT_TIME++ ));done;
          FINAL_STATUS=$(kubectl get deployment $DEPLOYMENT_NAME -n $NAMESPACE -o jsonpath="{.status.conditions[0].status}")
          echo "Status of deployment is $FINAL_STATUS"
          echo '::set-output name=final_status::'$FINAL_STATUS
        env:
          NAMESPACE: ${{needs.deploy.outputs.namespace}}
          DEPLOYMENT_NAME: ${{needs.deploy.outputs.deployment_name}}
      
      - id: run_testim
        name: Run testim e2e test if deployment is true
        if: ${{ env.FINAL_STATUS == 'True'}}
        continue-on-error: true
        run: |-
          npm i -g @testim/testim-cli && testim --token ${{ secrets.TESTIM_API_TOKEN }} --project $TESTIM_PROJECT --grid $TESTIM_GRID --suite $TESTIM_SUITE $TESTIM_ADDITIONAL_FLAGS
        env:
          FINAL_STATUS: ${{ steps.check_status.outputs.final_status }}

      - name: Slack Notification for testim failure
        id: slack_testim_notif
        if: steps.run_testim.outcome == 'failure'
        uses: slackapi/slack-github-action@v1.19.0
        with:
          payload: "{\"text\":\"Testim result\", \"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"Testim failed! Please check `${{ env.TESTIM_SUITE }}` suite on https://app.testim.io/#/project/${{ env.TESTIM_PROJECT }}/branch/master/runs/suites\"}}]}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Fail workflow if testim fails
        id: fail_wf_testim
        if: steps.run_testim.outcome == 'failure'
        run: |-
          echo "Testim failed! Please check ${{ env.TESTIM_SUITE }} suite on https://app.testim.io/#/project/${{ env.TESTIM_PROJECT }}/branch/master/runs/suites"
          exit 1
      
      - name: Slack Notification for testim success
        id: slack_testim_notif_success
        if: steps.run_testim.outcome == 'success'
        uses: slackapi/slack-github-action@v1.19.0
        with:
          payload: "{\"text\":\"Testim result\", \"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"Testim succeded! Please check `${{ env.TESTIM_SUITE }}` suite on https://app.testim.io/#/project/${{ env.TESTIM_PROJECT }}/branch/master/runs/suites for more details\"}}]}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
