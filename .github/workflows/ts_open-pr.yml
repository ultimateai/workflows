name: "Open PR to main branch"

on:
  workflow_call:
    inputs:
      test_command:
        required: false
        type: string
        description: "Command for running your tests, defaults to - npm run test"
        default: "npm run test"
      build_command:
        required: false
        type: string
        description: "Command for running npm run build, defaults to - npm run build"
        default: "npm run build"
      lint_command:
        required: false
        type: string
        description: "Command for running npm run lint, defaults to - npm run lint"
        default: "npm run lint"
      npm_install_command:
        required: false
        type: string
        description: "Command for npm i, defaults to - npm i"
        default: "npm i"
      node_version:
        required: false
        type: string
        default: "18.x"
        description: "Node version used in the pipeline, defaults to 18.x"
      npm_version:
        required: false
        type: string
        description: "Npm version used in the pipeline, defaults to LTS version"
      runner:
        required: false
        default: "preemptible-runners"
        description: "Runner to use for the workflow"
        type: string

env:
  TEST_COMMAND: ${{ inputs.test_command }}
  BUILD_COMMAND: ${{ inputs.build_command }}
  LINT_COMMAND: ${{ inputs.lint_command }}
  NPM_INSTALL_COMMAND: ${{ inputs.npm_install_command }}
  NODE_VERSION: ${{ inputs.node_version }}
  NPM_VERSION: ${{ inputs.npm_version }}

jobs:
  test_build:
    runs-on: ${{ inputs.runner }}
    name: Test code and build image
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: npm install
        if: ${{ env.NPM_VERSION }}
        run: npm i -g npm@${{ env.NPM_VERSION }} --registry=https://registry.npmjs.org

      - name: Export Home
        run: echo "HOME=/root" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v2"
        with:
          token_format: "access_token"
          workload_identity_provider: "${{ secrets.WIF_PROVIDER_NAME }}"
          service_account: ${{ secrets.GSA_GCR_EMAIL }}

      - name: Install npm Packages
        run: |
          if grep -q artifactregistry-login "package.json"; then
            npm run artifactregistry-login -- --credential-config .npmrc
          fi
          $NPM_INSTALL_COMMAND

      - name: Lint
        if: ${{ env.LINT_COMMAND }}
        run: $LINT_COMMAND

      - name: Test
        if: ${{ env.TEST_COMMAND }}
        run: $TEST_COMMAND

      - name: build
        if: ${{ env.BUILD_COMMAND }}
        run: $BUILD_COMMAND

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v32.1.2

      - name: Docker build if Dockerfile has changed
        if: contains(steps.changed-files.outputs.modified_files, 'Dockerfile')
        run: |-
          docker build .
        shell: bash

      - name: check sonar properties file exists
        id: check-properties-file
        uses: andstor/file-existence-action@v3
        with:
          files: "sonar-project.properties"

      #  If sonar properties does not exist, fail build and display proper message
      - name: Fail the build if sonar properties file does not exist
        if: steps.check-properties-file.outputs.files_exists == 'false'
        run: |
          echo "Sonar properties file does not exist. Please create a sonar-project.properties file in the root of your project."
          exit 1

      - name: Sonarqube Scan PR
        id: pr-sonarqube-scan
        if: steps.check-properties-file.outputs.files_exists == 'true'
        uses: SonarSource/sonarqube-scan-action@v4.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONARQUBE_HOST }}
        with:
          args: >
            -Dsonar.pullrequest.key=${{ github.event.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}
            -Dsonar.pullrequest.github.repository=${{ github.repository }}
            -Dsonar.scm.revision=${{ github.event.pull_request.head.sha }}
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.projectVersion=${{ github.sha }}

      - name: Check quality gate status
        if: steps.check-properties-file.outputs.files_exists == 'true'
        uses: SonarSource/sonarqube-scan-action@v4.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONARQUBE_HOST }}
        with:
          args: >
            -Dsonar.qualitygate.wait=true

      # Fail the build if the quality gate fails
      - name: Fail the build if the quality gate fails
        if: steps.pr-sonarqube-scan.outputs.status == 'SUCCESS'
        run: |
          STATUS=$(curl -s -u ${{ secrets.SONARQUBE_TOKEN }}: "${{ secrets.SONARQUBE_HOST }}/api/qualitygates/project_status?analysisId=$(curl -s -u ${{ secrets.SONARQUBE_TOKEN }}: "$SONAR_HOST_URL/api/ce/component?componentKey=${{ github.repository }}&branch=${{ github.head_ref }}" | jq -r '.analyses[0].key')" | jq -r '.projectStatus.status')
          echo "Quality gate status: $STATUS"
          if [ "$STATUS" != "OK" ]; then
            echo "Quality gate failed. Please check the SonarQube dashboard for more details."
            exit 1
          fi
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONARQUBE_HOST }}
