name: "Open PR to main branch"

on:
  workflow_call:
    inputs:
      test_command:
        required: false
        type: string
        description: "Command for running your tests, defaults to - npm run test"
        default: "npm run test"

env:
  TEST_COMMAND: ${{ inputs.test_command }}


jobs:
  test_build:
    runs-on: self-hosted
    name: Test code and build image 
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'

      - name: Export Home
        run: echo "HOME=/root" >> $GITHUB_ENV

      ##  Needs to be added so as to pull common Libs from bitbucket ##
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.BB_SSH_KEY }}
          name: id_rsa
          known_hosts: bitbucket.org
          if_key_exists: ignore

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          workload_identity_provider: "${{ secrets.WIF_PROVIDER_NAME }}"
          service_account: ${{ secrets.GSA_GCR_EMAIL }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v0"

      - name: Install npm Packages
        run: |
          if grep -q artifactregistry-login "package.json"; then
            npm run artifactregistry-login
          fi
          npm i
          
      - name: Test
        if: ${{ env.TEST_COMMAND }}
        run: $TEST_COMMAND

      - name: Lint
        run: npm run lint

      - name: build
        run: npm run build

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v29.0.3

      - name: Verify if Dockerfile has been changed
        id: check_change_in_dockerfile
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "$file was changed"
          done
          if [[ " ${steps.changed-files.outputs.all_changed_files[*]} " =~ " Dockerfile " ]]; then
            echo '::set-output name=dockerfile_changed::True'
          fi

      - name: Docker build
        if: steps.check_change_in_dockerfile.outputs.dockerfile_changed == 'True'
        run: |-
          echo "$SSH_KEY" > id_rsa
          docker build .
        shell: bash
        env:
          SSH_KEY: ${{secrets.BB_SSH_KEY}}
