name: Rollback

on:
  workflow_call:
    inputs:
        image_repo:
          required: true
          type: string
          description: "Your container registry repository - like eu.gcr.io/ultimateai-169214"
        app_squad:
          required: true
          type: string
          description: "Your app Squad - where your app is located inside argoCD (backend, ai, qa...)"
        environment:
          required: true
          type: string
          description: "In which environment do you want to deploy"
        version:
          required: true
          type: string
          description: "Which tag do you want to deploy - if none, workflow will fail"
        github_email:
          required: true
          type: string
          description: "Automatic CI/CD commits will be done by this email"
        github_user:
          required: true
          type: string
          description: "Automatic CI/CD commits will be done by this user"
        k8s_manifests_repo:
          required: true
          type: string
          description: "Owner and repo name containing your k8s manifests - like ultimateai/k8s-manifests"
        allowed_users:
          required: false
          type: string
          description: "Users allowed to deploy specific versions - format should be like user1,user2,user3"
        app_names:
          required: false
          type: string
          description: "In case you want to deploy to multiple places or your app_name does not coincide with your repo name. format should be like app1,app2,app3"


env:
  IMAGE_REPO: ${{ inputs.image_repo }}
  APP_SQUAD: ${{ inputs.app_squad }}
  ENVIRONMENT: ${{ inputs.environment }}
  VERSION: ${{ inputs.version }}
  GITHUB_EMAIL: ${{ inputs.github_email }}
  GITHUB_USER: ${{ inputs.github_user }}
  K8S_MANIFESTS_REPO: ${{ inputs.k8s_manifests_repo }}
  ALLOWED_USERS: ${{ inputs.allowed_users }}
  APP_NAMES: ${{ inputs.app_names }}


jobs:
  deploy_rollback:
    name: Update k8s-manifest repo
    runs-on: self-hosted
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          
      - id: "image_name"
        name: "Get repo name and update IMAGE_NAME"
        run: |- 
          IMAGE_NAME=$IMAGE_REPO"/"${{ github.event.repository.name }}
          echo $IMAGE_NAME
          echo '::set-output name=image_name::'$IMAGE_NAME

      - id: fetch_latest_release
        uses: gregziegan/fetch-latest-release@v2.0.0
        with:
          github_token: ${{ secrets.ULTIMATE_GITHUB_PAT }}

      - id: tag_to_deploy
        name: Calculate version to deploy
        run: |-
          TAG=$VERSION
          echo '::set-output name=tag::'$TAG

      - id: "app_names"
        name: "Get app_names if necessary"
        run: |- 
          if [[ -z "${APP_NAMES}" ]]; then
            APP_NAMES=${{ github.event.repository.name }}
          fi
          echo $APP_NAMES
          echo '::set-output name=app_names::'$APP_NAMES

      # - id: tag_to_deploy
      #   name: Calculate version to deploy
      #   run: |-
      #     if [[ -z "${VERSION}"  ]]; then
      #       echo "Version is empty, in rollback workflow version is mandatory!"
      #       exit 1
      #     else
      #       if [[ -z "${ALLOWED_USERS}"  ]]; then
      #         echo "You have selected a specific version to deploy, but provided no list of people who can deploy specific versions (allowed_users)"
      #         exit 1
      #       fi
      #       IFS=',' read -r -a array <<< "$ALLOWED_USERS"
      #       if [[ " ${array[*]} " =~ ${{ github.actor }} ]]; then
      #         echo "This user - ${{ github.actor }} - is allowed"
      #         TAG=$VERSION
      #       else
      #         echo "Sorry,${{ github.actor }}, you are not allowed to choose specific version to deploy - contact your platform team"
      #         exit 1
      #       fi
      #     fi
      #     echo '::set-output name=tag::'$TAG

      - id: get_changelog_content
        name: Get last changelog lines for slack notif
        run: |-
          CHANGELOG_LINES=$(head -4 CHANGELOG.md)
          echo $CHANGELOG_LINES
          echo '::set-output name=changelog_lines::'$CHANGELOG_LINES

      - name: "Checkout k8s manifests"
        uses: actions/checkout@v3
        with:
          repository: ${{ env.K8S_MANIFESTS_REPO }}
          token: ${{ secrets.ULTIMATE_GITHUB_PAT }}
      
      - name: Check if version is already deployed in stage, if trying to deploy in prod
        run: |-
          if [[ "${ENVIRONMENT}" == "production" ]]; then
            STAGE_VERSION=$(cat $APP_SQUAD/$APP_NAMES/overlay/staging/kustomization.yaml | yq .images.0.newTag)
            if [[ ! "${STAGE_VERSION}" = "${TAGS}" ]]; then
              echo "Stage version is $STAGE_VERSION and you want to deploy to production $TAGS. Please, deploy to staging env first"
              exit 1
            fi
          fi
        env:
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}

      - name: Check old deployed version in env to improve slack message
        id: get_old_version
        run: |-
          OLD_VERSION=$(cat $APP_SQUAD/$APP_NAMES/overlay/$ENVIRONMENT/kustomization.yaml | yq .images.0.newTag)
          echo '::set-output name=old_version::'$OLD_VERSION
        env:
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}
          
      - name: Update the Image tags for Selected Environment
        run: |-
          if [[ $APP_NAMES == *","* ]]; then
            IFS=',' read -r -a array_app_names <<< "$APP_NAMES"
            for app_name in "${array_app_names[@]}"
            do
              cd $APP_SQUAD/$app_name/overlay/$ENVIRONMENT
              kustomize edit set image app=${IMAGE_NAME}:${TAGS}
              cat kustomization.yaml
              git config --local user.email $GITHUB_EMAIL
              git config --local user.name $GITHUB_USER
              git commit -m "Rollback $app_name image to ${IMAGE_NAME}:${TAGS}" -a
              git push ${REMOTE_REPO} HEAD:main --force 
              cd ../../../../
            done 
          else
            cd $APP_SQUAD/$APP_NAMES/overlay/$ENVIRONMENT
            kustomize edit set image app=${IMAGE_NAME}:${TAGS}
            cat kustomization.yaml
            git config --local user.email $GITHUB_EMAIL
            git config --local user.name $GITHUB_USER
            git commit -m "Rollback image to ${IMAGE_NAME}:${TAGS}" -a
            git push ${REMOTE_REPO} HEAD:main --force 
          fi
        env:
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}
          REMOTE_REPO: https://${{ secrets.ULTIMATE_GITHUB_PAT }}@github.com/${{ env.K8S_MANIFESTS_REPO }}.git
          IMAGE_NAME: ${{ steps.image_name.outputs.image_name }}
          APP_NAMES: ${{ steps.app_names.outputs.app_names }}

      - name: Slack Notification for rollback
        id: slack_notif_rollback
        if: ${{ env.TAGS != env.LATEST_TAG }}
        uses: slackapi/slack-github-action@v1.19.0
        with:
          payload: "{\"text\":\"Manual deployment\", \"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"Deployment of `${{ github.event.repository.name }}` to `${{ env.ENVIRONMENT }}` by ${{ github.actor }} , `${{ env.OLD_VERSION }}` -> `${{ env.TAGS }}` \\n *WARNING!!* This is a rollback! Please add any information under this thread. \"}}]}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          TAGS: ${{ steps.tag_to_deploy.outputs.tag }}
          LATEST_TAG: ${{ steps.fetch_latest_release.outputs.tag_name }}
          IMAGE_NAME: ${{ steps.image_name.outputs.image_name }}
          OLD_VERSION: ${{ steps.get_old_version.outputs.old_version }}
          RELEASE_TITLE: ${{ steps.fetch_latest_release.outputs.name }}


                  

      
